{
  var parser_util = require('./parser_util.js')

  lineno = 1;

  doc = { type: 'document',
          imports: [],
          verifications: [],
          content: [],
          annotation: null
        };
}

start
  = document { return doc; }

document
  = l:importlist document { doc.imports = doc.imports.concat(l); }
  / v:verifylist document { doc.verifications = doc.verifications.concat(v); }
  / c:content document { doc.content = doc.content.concat(c); }
  / { }

importlist
  = i:import l:importlist { return [e].concat(l); }
  / i:import { return [i]; }

import
  = "@require " modulename:module space {
    return {'type': 'import', 'module': modulename };
  }

verifylist
  = v:verify l:verifylist { return [v].concat(l); }
  / v:verify { return [v]; }

verify
  = "@verify" space rule:[a-zA-Z0-9\. ]+ {
    return {
      type: "verification",
      rule: parser_util.make_array(rule.join(''))
    };
  }

variable
  = name:[a-zA-Z]+ { return name.join(''); }

module
  = name:[a-zA-Z\.]+ { return name.join(""); }

macro
  = '@' macroname:[a-zA-Z0-9\.]+ '(' argument:[a-zA-Z0-9\.]+ ')' {
    return {
      type: 'macro',
      content: '@' + macroname.join(''),
      argument: argument.join('')
    };
  }
  / '@' macroname:[a-zA-Z0-9\.]+ {
    return {
      type: 'macro',
      content: '@' + macroname.join('')
    };
  }


content
  = m:macro rest:content {
    return [m].concat(rest);
  }
  / m:macro {
    return [m];
  }
  / text:[^<^@]+ rest:content {
    var node = {
      type: 'text',
      content: text.join('').trim()
    };
    return [node].concat(rest);
  }
  / text:[^<^@]+ {
    var node = {
      type: 'text',
      content: text.join('').trim()
    };
    return [node];
  }
  / e:element rest:content {
    return [e].concat(rest);
  }
  / e:element {
    return [e];
  }

opentag
  = "<" starttag:literal space? attrs:attributemap? annotation:elementannotation?">" {
    return {
      name: starttag,
      attributes: attrs === null ? {} : attrs,
      annotation: annotation
    };
  }

closetag
  = "</" endtag:literal ">" space? { return endtag }

element
  = starttag:opentag c:content? endtag:closetag {
    if (starttag.name != endtag) {
      console.log("error " + lineno + ": Start tag <" + starttag.name + ">  does not match up with end tag </" + endtag + ">")
    }
    return {
      type: 'element',
      name: starttag.name,
      attributes: starttag.attributes,
      annotation: starttag.annotation,
      content: c === null ? [] : c,
      lineno: lineno };
  }

attributemap
  = a:attribute m:attributemap { parser_util.merge_attributes(m,a) }
  / a:attribute { return parser_util.merge_attributes({}, a); }

attribute_value
  = "=\"" v:literallist "\"" {
    return v;
  }

attribute
  = name:literal values:attribute_value? space? {
    return {
      name: name,
      value: values === null ? [] : values
    };
  }

functioncall
  = "@" functionname:module "()" {
    var variable = parser_util.make_variable(functionname);
    variable['type'] = 'funcall';
    return variable;
  }

iteration
 = "@foreach" space? "(" + space? func:functioncall space "in" space "@" collection:module space? ")" {
    return {
      type: 'iteration',
      funcall: func,
      collection: parser_util.make_variable(collection)
    }
  }

elementannotation
  = i:iteration {
    return i;
  }
  / funcall:functioncall {
    return funcall;
  }

literallist
  = lit:literal lst:literallist { return [lit].concat(lst); }
  / lit:literal { return [lit] }

literal
  = letters:[a-zA-Z0-9]+ space? { return letters.join(""); }

space
  = chars:[ \n\t]+ {
    lineno += parser_util.count_linebreaks(chars.join("")); // Increase current line.
    return "SPACE"
  }
